% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/optimMKV.R
\name{optimMKV}
\alias{objMKV}
\alias{optimMKV}
\title{Optimization of sample configurations for spatial interpolation}
\usage{
optimMKV(points, candi, covars, equation = z ~ 1, model,
  krige.stat = "mean", x.max, x.min, y.max, y.min, iterations = 10000,
  acceptance = list(initial = 0.99, cooling = iterations/10),
  stopping = list(max.count = iterations/10), plotit = TRUE, boundary,
  progress = TRUE, verbose = TRUE, greedy = FALSE, weights, nadir, utopia)

objMKV(points, candi, covars, equation, model, krige.stat = "mean")
}
\arguments{
\item{points}{Integer value, integer vector, data frame or matrix. If
\code{points} is an integer value, it defines the number of points that
should be sampled from \code{candi}. If \code{points} is a vector of integer
values, it contains the row indexes of \code{candi} that correspond to the
points. If \code{points} is a data frame or matrix, it must have three
columns in the following order: \code{[, 1]} the identification of each point
(1, 2, ..., n), \code{[, 2]} the projected x-coordinates, and \code{[, 3]}
the projected y-coordinates. In the later case, \code{points} must be a
subset of \code{candi}.}

\item{candi}{Data frame or matrix with the candidate locations for the
perturbed points. \code{candi} must have three columns in the following
order: \code{[, 1]} the identification of each candidate location (1, 2, ...,
n), \code{[, 2]} the projected x-coordinates, and \code{[, 3]} the projected
y-coordinates.}

\item{covars}{Data frame or matrix with the covariates in the columns.}

\item{equation}{Formula string that defines the dependent variable \code{z}
as a linear model of independent variables. Defaults to
\code{equation = z ~ 1}. See the argument \code{formula} in the function
\code{\link[gstat]{krige}} for more information.}

\item{model}{Object of class "variogramModel". See the argument
\code{model} in the function \code{\link[gstat]{krige}} for more information.}

\item{krige.stat}{Character value defining the statistic that should be used
to summarize the kriging variance. Available options are \code{"mean"} and
\code{"max"} for the mean and maximum kriging variance, respectively.
Defaults to \code{krige.stat = "mean"}.}

\item{x.max,x.min,y.max,y.min}{Numeric value. The minimum and maximum
quantity of random noise to be added to the projected x- and y-coordinates.
The minimum quantity should be equal to, at least, the minimum distance
between two neighbouring candidate locations. The units are the same as of
the projected x- and y-coordinates.}

\item{iterations}{Integer. The maximum number of iterations that should be
used for the optimization.}

\item{acceptance}{List with two named sub-arguments: \code{initial} --
numeric value between 0 and 1 defining the initial acceptance probability,
and \code{cooling} -- a numeric value defining the exponential factor by
witch the acceptance probability decreases at each iteration. Defaults to
\code{acceptance = list(initial = 0.99, cooling = iterations / 10)}.}

\item{stopping}{List with one named sub-argument: \code{max.count} --
integer value defining the maximum allowable number of iterations without
improvement of the objective function value. Defaults to
\code{stopping = list(max.count = iterations / 10)}. More options may be
included in the future.}

\item{plotit}{Logical for plotting the optimization results. This includes
a) the progress of the objective function values and acceptance
probabilities, and b) the original points, the perturbed points and the
progress of the maximum perturbation in the x- and y-coordinates. The plots
are updated at each 10 iterations. Defaults to \code{plotit = TRUE}.}

\item{boundary}{SpatialPolygon. The boundary of the spatial domain.
Mandatory if \code{plotit = TRUE}.}

\item{progress}{Logical for printing a progress bar. Defaults to
\code{progress = TRUE}.}

\item{verbose}{Logical for printing messages about the progress of the
optimization.}

\item{greedy}{Logical value. Should the optimization be done using a greedy
algorithm, that is, accepting only better system configurations? Defaults
to \code{greedy = FALSE}.}

\item{weights}{List with named sub-arguments. The weights assigned to each of
the objective functions combined to form the multi-objective optimization
problem (MOOP). They must be named after the objective function to which
they apply. The weights must be larger than 0 and sum to 1. The default
option gives equal weights to all objective functions.}

\item{nadir}{List with named sub-arguments. Three options are available:
1) \code{sim} -- the number of random realizations to estimate the nadir
point, and \code{seeds} -- vector defining the random seeds for each of the
realizations; 2) \code{user} -- a list of user-defined values named after
the objective function to which they apply; 3) \code{abs} -- logical for
calculating the nadir point internally.}

\item{utopia}{List with two named sub-arguments: \code{user} -- a list of
user-defined values named after the objective function to which they apply,
and \code{abs} -- logical for calculating the utopia point internally.
Defaults to \code{user = NULL} and \code{abs = NULL}.}
}
\value{
\code{optimMKV} returns a matrix: the optimized sample configuration with
the evolution of the energy state during the optimization as an attribute.

\code{objMKV} returns a numeric value depending on the choice of
\code{krige.stat}. If \code{krige.stat = "mean"}, the mean kriging variance.
If \code{krige.stat = "max"}, the maximum kriging variance.
}
\description{
Optimize a sample configuration for spatial interpolation with a known linear
model. A criterion is defined so that the sample configuration minimizes the
mean/maximum kriging variance.
}
\examples{
require(pedometrics)
require(sp)
require(gstat)
require(plyr)
data(meuse.grid)
candi <- meuse.grid[, 1:2]
covars <- as.data.frame(meuse.grid)
model <- vgm(psill = 10, model = "Exp", range = 500, nugget = 8)
set.seed(2001)
res <- optimMKV(points = 100, candi = candi, covars = covars,
                equation = z ~ dist, model = model, iterations = 100)
tail(attr(res, "energy"), 1) # 11.61896
objMKV(points = res, candi = candi, covars = covars, equation = z ~ dist,
       model = model)
}
\author{
Alessandro Samuel-Rosa \email{alessandrosamuelrosa@gmail.com}
}
\references{
Arora, J. \emph{Introduction to optimum design}. Waltham: Academic Press, p.
896, 2011.

Marler, R. T.; Arora, J. S. Survey of multi-objective optimization methods
for engineering. \emph{Structural and Multidisciplinary Optimization}, v. 26,
p. 369-395, 2004.

Marler, R. T.; Arora, J. S. Function-transformation methods for
multi-objective optimization. \emph{Engineering Optimization}, v. 37, p.
551-570, 2005.

Marler, R. T.; Arora, J. S. The weighted sum method for multi-objective
optimization: new insights. \emph{Structural and Multidisciplinary
Optimization}, v. 41, p. 853-862, 2009.

Brus, D. J. & Heuvelink, G. B. M. Optimization of sample patterns for
universal kriging of environmental variables. \emph{Geoderma}. v. 138,
p. 86-95, 2007.

Heuvelink, G. B. M.; Brus, D. J. & de Gruijter, J. J. Optimization of sample
configurations for digital mapping of soil properties with universal kriging.
In: Lagacherie, P.; McBratney, A. & Voltz, M. (Eds.) \emph{Digital soil
mapping - an introductory perspective}. Elsevier, v. 31, p. 137-151, 2006.
}
\concept{
simulated annealing

simulated annealing
}
\keyword{optimize}
\keyword{spatial}

