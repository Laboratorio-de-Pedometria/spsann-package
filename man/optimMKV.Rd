% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimMKV.R
\name{optimMKV}
\alias{optimMKV}
\alias{objMKV}
\alias{MKV}
\title{Optimization of sample configurations for spatial interpolation (II)}
\usage{
optimMKV(
  points,
  candi,
  covars,
  eqn,
  vgm,
  krige.stat = "mean",
  ...,
  schedule,
  plotit = FALSE,
  track = FALSE,
  boundary,
  progress = "txt",
  verbose = FALSE
)

objMKV(points, candi, covars, eqn, vgm, krige.stat = "mean", ...)
}
\arguments{
\item{points}{Integer value, integer vector, data frame or matrix, or list. The number of
sampling points (sample size) or the starting sample configuration. Four options are available:
\itemize{
\item Integer value. The required number of sampling points (sample size). The sample configuration
used to start the optimization will consist of grid cell centres of \code{candi} selected using
simple random sampling, i.e. \code{\link[base:sample]{base::sample()}} with \code{x = 1:nrow(candi)} and \code{size = points}.
\item Integer vector. A set of row indexes between one (1) and \code{nrow(candi)} identifying the grid
cell centres of \code{candi} that should be used to form the starting sample configuration for the
optimization. The length of the integer vector, \code{length(points)}, is the sample size.
\item Data frame or matrix. An object with three columns in the following order: \verb{[, "id"]}, the
row indexes of \code{candi} that correspond to each sample, \verb{[, "x"]}, the projected x-coordinates,
and \verb{[, "y"]}, the projected y-coordinates.
\item List. An object with two named arguments:
\itemize{
\item \code{fixed}: a data frame or matrix with the projected x- and y-coordinates of the existing
sample configuration -- kept fixed during the optimization --, and
\item \code{free}: an integer value defining the number of samples that should be added to the existing
sample configuration -- free to move during the optimization.
}
}}

\item{candi}{Data frame or matrix with the candidate locations for the jittered samples. \code{candi}
must have two columns in the following order: \verb{[, "x"]}, the projected x-coordinates, and
\verb{[, "y"]}, the projected y-coordinates.}

\item{covars}{Data frame or matrix with the covariates in the columns. The number of rows of \code{covars} must
match exactly that of \code{candi} -- or \code{eval.grid}, in case a coarser evaluation grid is used.}

\item{eqn}{Formula string that defines the dependent variable \code{z} as a linear function of the independent
variables (covariates) contained in \code{covars}. See the argument \code{formula} in the function
\verb{\link[gstat]\{krige\}} for more information.}

\item{vgm}{Object of class \code{variogramModel}. See the argument \code{model} in the function \verb{\link[gstat]\{krige\}}
for more information.}

\item{krige.stat}{Character value defining the statistic that should be used to summarize the kriging
prediction error variance. Available options are \code{"mean"} and \code{"max"} for the mean and maximum kriging
prediction error variance, respectively. Defaults to \code{krige.stat = "mean"}.}

\item{...}{further arguments passed to \verb{\link[gstat]\{krige\}}. (Advanced users only!)}

\item{schedule}{List with named sub-arguments defining the control parameters of the cooling
schedule. See \code{\link[=scheduleSPSANN]{scheduleSPSANN()}}.}

\item{plotit}{(Optional) Logical for plotting the optimization results, including a) the progress
of the objective function, and b) the starting (gray circles) and current sample configuration
(black dots), and the maximum jitter in the x- and y-coordinates. The plots are updated at each
10 jitters. When adding samples to an existing sample configuration, fixed samples are indicated
using black crosses. Defaults to \code{plotit = FALSE}.}

\item{track}{(Optional) Logical value. Should the evolution of the energy state be recorded and
returned along with the result? If \code{track = FALSE} (the default), only the starting and ending
energy states are returned along with the results.}

\item{boundary}{(Optional) SpatialPolygon defining the boundary of the spatial domain. If
missing and \code{plotit = TRUE}, \code{boundary} is estimated from \code{candi}.}

\item{progress}{(Optional) Type of progress bar that should be used, with options \code{"txt"}, for a
text progress bar in the R console, \code{"tk"}, to put up a Tk progress bar widget, and \code{NULL} to
omit the progress bar. A Tk progress bar widget is useful when using parallel processors.
Defaults to \code{progress = "txt"}.}

\item{verbose}{(Optional) Logical for printing messages about the progress of the optimization.
Defaults to \code{verbose = FALSE}.}
}
\value{
\code{optimMKV} returns an object of class \code{OptimizedSampleConfiguration}: the optimized sample
configuration with details about the optimization.

\code{objMKV} returns a numeric value: the energy state of the sample configuration -- the objective
function value.
}
\description{
Optimize a sample configuration for spatial interpolation with a 'known' linear mixed model, e.g. universal
(external drift) kriging and regression-kriging with a linear regression model. A criterion is defined so
that the sample configuration minimizes the mean or maximum kriging prediction error variance (\bold{MKV}).
}
\details{
\subsection{Generating mechanism}{
There are multiple mechanism to generate a new sample configuration out of an existing one. The
main step consists of randomly perturbing the coordinates of a single sample, a process known as
\sQuote{jittering}. These mechanisms can be classified based on how the set of candidate
locations for the samples is defined. For example, one could use an \emph{infinite} set of candidate
locations, that is, any location in the spatial domain can be selected as a new sample location
after a sample is jittered. All that is needed is a polygon indicating the boundary of the
spatial domain. This method is more computationally demanding because every time an existing
sample is jittered, it is necessary to check if the new sample location falls in spatial domain.

Another approach consists of using a \emph{finite} set of candidate locations for the samples. A
finite set of candidate locations is created by discretising the spatial domain, that is,
creating a fine (regular) grid of points that serve as candidate locations for the jittered
sample. This is a less computationally demanding jittering method because, by definition, the
new sample location will always fall in the spatial domain.

Using a finite set of candidate locations has two important inconveniences. First, not all
locations in the spatial domain can be selected as the new location for a jittered sample.
Second, when a sample is jittered, it may be that the new location already is occupied by another
sample. If this happens, another location has to be iteratively sought for, say, as many times as
the size of the sample configuration. In general, the larger the size of the sample
configuration, the more likely it is that the new location already is occupied by another sample.
If a solution is not found in a reasonable time, the the sample selected to be jittered is kept
in its original location. Such a procedure clearly is suboptimal.

\strong{spsann} uses a more elegant method which is based on using a finite set of candidate locations
coupled with a form of \emph{two-stage random sampling} as implemented in \code{\link[spcosa:spsample-methods]{spcosa::spsample()}}.
Because the candidate locations are placed on a finite regular grid, they can be taken as the
centre nodes of a finite set of grid cells (or pixels of a raster image). In the first stage, one
of the \dQuote{grid cells} is selected with replacement, i.e. independently of already being
occupied by another sample. The new location for the sample chosen to be jittered is selected
within that \dQuote{grid cell} by simple random sampling. This method guarantees that virtually
any location in the spatial domain can be selected. It also discards the need to check if the new
location already is occupied by another sample, speeding up the computations when compared to the
first two approaches.
}

\subsection{Annealing schedule}{
The \emph{search graph} corresponds to the set of effective candidate locations for a sample location
selected to be jittered. The size of the search graph, i.e. area within which a sample location
can be moved around, is related to the concept of \emph{temperature}. A larger search graph is
equivalent to higher temperatures, which potentially result in more movement -- or
\sQuote{agitation} -- of the set of sample locations.

The current version of the \pkg{spsann}-package uses a linear cooling schedule which depends upon
the number of jitters to control the size of the search graph. The equations are

\eqn{x_max = x_max0 - (chains_i / chains) * (x_max0 - x_min) + x_cellsize + x_min0}

and

\eqn{y_max = y_max0 - (chains_i / chains) * (y_max0 - y_min) + y_cellsize + y_min0},

where $x_max0$ and $y_max0$ are the maximum allowed shifts in the x- and y-coordinates in the
first chain, $x_min$ and $y_min$ are the minimum required shifts in the x- and y-coordinates,
$x_max$ and $y_max$ are the maximum allowed shifts in the x- and y-coordinates during the next
chain, $chains$ and $chain_i$ are the total and current chains, and $x_cellsize$ and $y_cellsize$
are the grid spacing in the x- and y-coordinates. Because $x_cellsize$ and $y_cellsize$ can be
equal to zero when a finite set of candidate locations is used, $x_min0$ and $y_min0$ are the
maximum nearest neighbour distance in the x- and y-coordinates between candidate locations.
}
}
\note{
\subsection{Distance between two points}{
\strong{spsann} always computes the distance between two locations (points) as the
\link[=euclidean]{Euclidean distance} between them. This computation requires the optimization to
operate in the two-dimensional Euclidean space, i.e. the coordinates of the sample, candidate
and evaluation locations must be planar coordinates, generally in metres or kilometres.
\strong{spsann} has no mechanism to check if the coordinates are planar: you are the sole responsible
for making sure that this requirement is attained.
\link{euclidean}: https://en.wikipedia.org/wiki/Euclidean_distance
}

This function is based on the method originally proposed by Heuvelink, Brus and de Gruijter (2006) and
implemented in the R-package \pkg{intamapInteractive} by Edzer Pebesma and Jon Skoien.
}
\examples{
#####################################################################
# NOTE: The settings below are unlikely to meet your needs.         #
#####################################################################
\dontrun{
data(meuse.grid, package = "sp")
candi <- meuse.grid[1:1000, 1:2]
covars <- as.data.frame(meuse.grid)[1:1000, ]
vgm <- gstat::vgm(psill = 10, model = "Exp", range = 500, nugget = 8)
schedule <- scheduleSPSANN(
  initial.temperature = 10, chains = 1, x.max = 1540, y.max = 2060, 
  x.min = 0,  y.min = 0, cellsize = 40)
set.seed(2001)
res <- optimMKV(
  points = 10, candi = candi, covars = covars, eqn = z ~ dist, 
  vgm = vgm, schedule = schedule)
data.frame(
  expected = 15.37137,
  objSPSANN = objSPSANN(res),
  objMKV = objMKV(
    points = res, candi = candi, covars = covars, eqn = z ~ dist, vgm = vgm)
)
}
}
\references{
Brus, D. J.; Heuvelink, G. B. M. Optimization of sample patterns for universal kriging of environmental
variables. \emph{Geoderma}. v. 138, p. 86-95, 2007.

Heuvelink, G. B. M.; Brus, D. J.; de Gruijter, J. J. Optimization of sample configurations for digital
mapping of soil properties with universal kriging. In: Lagacherie, P.; McBratney, A. & Voltz, M. (Eds.)
\emph{Digital soil mapping - an introductory perspective}. Elsevier, v. 31, p. 137-151, 2006.
}
\author{
Alessandro Samuel-Rosa \email{alessandrosamuelrosa@gmail.com}
}
\concept{simulated annealing}
\concept{spatial interpolation}
\keyword{iteration}
\keyword{optimize}
\keyword{spatial}
