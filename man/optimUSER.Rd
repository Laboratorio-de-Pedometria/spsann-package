% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimUSER.R
\name{optimUSER}
\alias{optimUSER}
\alias{USER}
\title{Optimization of sample configurations using a user-defined objective function}
\usage{
optimUSER(
  points,
  candi,
  fun,
  ...,
  schedule,
  plotit = FALSE,
  track = FALSE,
  boundary,
  progress = "txt",
  verbose = FALSE
)
}
\arguments{
\item{points}{Integer value, integer vector, data frame or matrix, or list. The number of
sampling points (sample size) or the starting sample configuration. Four options are available:
\itemize{
\item Integer value. The required number of sampling points (sample size). The sample configuration
used to start the optimization will consist of grid cell centres of \code{candi} selected using
simple random sampling, i.e. \code{\link[base:sample]{base::sample()}} with \code{x = 1:nrow(candi)} and \code{size = points}.
\item Integer vector. A set of row indexes between one (1) and \code{nrow(candi)} identifying the grid
cell centres of \code{candi} that should be used to form the starting sample configuration for the
optimization. The length of the integer vector, \code{length(points)}, is the sample size.
\item Data frame or matrix. The Cartesian x- and y-coordinates of the starting sample configuration.
\item List. An object with two named sub-arguments:
\itemize{
\item \code{fixed} An integer vector, data frame or matrix specifying an existing sample configuration
(see options above). This sample configuration is kept as-is (fixed) during the entire
optimization, being used only to compute the objetive function values.
\item \code{free} An integer value, integer vector, data frame or matrix (see options above) specifying
the (number of) sampling points that should be added to the existing sample configuration.
These new sampling points are free to be moved around (jittered) during the optimization.
}
}

Most users will want to set an integer value simply specifying the required sample size. Using
an integer vector or data frame (or matrix) will generally be useful to users willing to
evaluate starting sample configurations, test strategies to speed up the optimization, and
fine-tune or thin an existing sample configuration. Finally, a list, will generally be used to
augment a possibly already existing, real-world sample configuration or fine-tune only a subset
of the existing sampling points.}

\item{candi}{Data frame or matrix with the candidate locations for the jittered samples. \code{candi}
must have two columns in the following order: \verb{[, "x"]}, the Cartesian x-coordinates, and
\verb{[, "y"]}, the Cartesian y-coordinates.}

\item{fun}{A function defining the objective function that should be used to evaluate the energy state of
the system configuration at each random perturbation of a candidate sample point. See \sQuote{Details} for
more information.}

\item{...}{Other arguments passed to the objective function. See \sQuote{Details} for more information.}

\item{schedule}{List with named sub-arguments defining the control parameters of the cooling
schedule. See \code{\link[=scheduleSPSANN]{scheduleSPSANN()}}.}

\item{plotit}{(Optional) Logical for plotting the optimization results, including a) the progress
of the objective function, and b) the starting (gray circles) and current sample configuration
(black dots), and the maximum jitter in the x- and y-coordinates. The plots are updated at each
10 jitters. When adding samples to an existing sample configuration, fixed samples are indicated
using black crosses. Defaults to \code{plotit = FALSE}.}

\item{track}{(Optional) Logical value. Should the evolution of the energy state be recorded and
returned along with the result? If \code{track = FALSE} (the default), only the starting and ending
energy states are returned along with the results.}

\item{boundary}{(Optional) SpatialPolygon defining the boundary of the spatial domain. If
missing and \code{plotit = TRUE}, \code{boundary} is estimated from \code{candi}.}

\item{progress}{(Optional) Type of progress bar that should be used, with options \code{"txt"}, for a
text progress bar in the R console, \code{"tk"}, to put up a Tk progress bar widget, and \code{NULL} to
omit the progress bar. A Tk progress bar widget is useful when using parallel processors.
Defaults to \code{progress = "txt"}.}

\item{verbose}{(Optional) Logical for printing messages about the progress of the optimization.
Defaults to \code{verbose = FALSE}.}
}
\value{
\code{optimUSER} returns an object of class \code{OptimizedSampleConfiguration}: the optimized sample
configuration with details about the optimization.
}
\description{
Optimize a sample configuration using a user-defined objective function.
}
\details{
The user-defined objective function \code{fun} must be an object of class \code{\link[base]{function}} and
include the argument \code{points}. The argument \code{points} is defined in \code{optimUSER} as a matrix
with three columns: \code{[, 1]} the identification of each sample point given by the respective row
indexes of \code{candi}, \code{[, 2]} the x-coordinates, and \code{[, 3]} the y-coordinates. The
identification is useful to retrieve information from any data matrix used by the objective function
defined by the user.
}
\examples{
#####################################################################
# NOTE: The settings below are unlikely to meet your needs.         #
#####################################################################
\dontrun{
# This example takes more than 5 seconds
require(sp)
require(SpatialTools)
data(meuse.grid)
candi <- meuse.grid[, 1:2]
schedule <- scheduleSPSANN(chains = 1, initial.temperature = 30,
                           x.max = 1540, y.max = 2060, x.min = 0, 
                           y.min = 0, cellsize = 40)

# Define the objective function - number of points per lag distance class
objUSER <-
  function (points, lags, n_lags, n_pts) {
    dm <- SpatialTools::dist1(points[, 2:3])
    ppl <- vector()
    for (i in 1:n_lags) {
      n <- which(dm > lags[i] & dm <= lags[i + 1], arr.ind = TRUE)
      ppl[i] <- length(unique(c(n)))
    }
    distri <- rep(n_pts, n_lags)
    res <- sum(distri - ppl)
  }
lags <- seq(1, 1000, length.out = 10)

# Run the optimization using the user-defined objective function
set.seed(2001)
timeUSER <- Sys.time()
resUSER <- optimUSER(points = 10, fun = objUSER, lags = lags, n_lags = 9,
                     n_pts = 10, candi = candi, schedule = schedule)
timeUSER <- Sys.time() - timeUSER

# Run the optimization using the respective function implemented in spsann
set.seed(2001)
timePPL <- Sys.time()
resPPL <- optimPPL(points = 10, candi = candi, lags = lags, 
                   schedule = schedule)
timePPL <- Sys.time() - timePPL

# Compare results
timeUSER
timePPL
lapply(list(resUSER, resPPL), countPPL, candi = candi, lags = lags)
objSPSANN(resUSER) - objSPSANN(resPPL)
}
}
\author{
Alessandro Samuel-Rosa \email{alessandrosamuelrosa@gmail.com}
}
\concept{simulated annealing}
\keyword{iteration}
\keyword{optimize}
\keyword{spatial}
